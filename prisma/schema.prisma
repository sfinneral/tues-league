datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  Password?
  profileId String?
  profile   Profile?
  teams     Team[]
  subs      Sub[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Profile {
  id          String  @id @default(cuid())
  phoneNumber String?
  firstName   String  @default("")
  lastName    String  @default("")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id      String   @id @default(cuid())
  slug    String   @unique
  name    String   @unique
  leagues League[]
}

model League {
  id             String         @id @default(cuid())
  name           String
  startDate      String
  slug           String         @unique
  courseId       String
  course         Course         @relation(fields: [courseId], references: [id])
  divisions      Division[]
  schedule       Schedule[]
  teams          Team[]
  subs           Sub[]
  playoffMatches PlayoffMatch[]
}

model PlayoffMatch {
  id            String @id @default(cuid())
  teams         Team[]
  bracketNumber Int
  leagueId      String
  league        League @relation(fields: [leagueId], references: [id])
}

model Division {
  id       String    @id @default(cuid())
  name     String
  teams    Team[]
  leagueId String
  league   League    @relation(fields: [leagueId], references: [id])
  schedule Schedule?
}

model Team {
  id      String  @id @default(cuid())
  users   User[]
  matches Match[]
  scores  Score[]

  division       Division       @relation(fields: [divisionId], references: [id])
  divisionId     String
  leagueId       String
  league         League         @relation(fields: [leagueId], references: [id])
  playoffMatches PlayoffMatch[]
}

model Match {
  id     String  @id @default(cuid())
  scores Score[]
  teams  Team[]
  Week   Week?   @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId String?
}

model Score {
  id    String @id @default(cuid())
  score Int?

  teamId  String
  team    Team   @relation(fields: [teamId], references: [id])
  matchId String
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model Schedule {
  id         String   @id @default(cuid())
  weeks      Week[]
  divisionId String   @unique
  division   Division @relation(fields: [divisionId], references: [id])

  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
}

model Week {
  id           String    @id @default(cuid())
  wasCancelled Boolean   @default(false)
  date         String
  matches      Match[]
  Schedule     Schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId   String?
  winners      Winner[]
}

model Sub {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
}

model Winner {
  id        String @id @default(cuid())
  teamId    String
  amountWon Int
  week      Week   @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId    String
}
